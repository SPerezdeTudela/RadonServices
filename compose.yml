version: "3"
# Port Mapping: (starting at 5450)
# - 5450: frontend
# - 5451: reserved for testing -- backend
# - 5452: reserved for testing -- postgres database
# - 5453: pgAdmin web interface

services:
  # Metadata database
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=radon
      - POSTGRES_PASSWORD=radon2023
    volumes:
      # Mounted volume for Postgres DB
      - /home/sofia/data/postgres:/var/lib/postgresql/data
    # TODO: remove this port after testing is complete
    ports:
      #Used to be 5452:5432
      - "5301:5302"
    networks:
      - radon_network

  # pgAdmin Database Manager (Web UI)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    user: 0:0 # TODO: use chown instead: https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html#mapped-files-and-directories
    ports:
      # Used to be 5453:80
      - "5300:70"
    networks:
      - radon_network
    environment:
      PGADMIN_DEFAULT_EMAIL: radon-user@uci.edu
      PGADMIN_DEFAULT_PASSWORD: radon-pgadmin4-2023
      # SCRIPT_NAME: /galaxyradon-pgadmin
    volumes:
      # Mounted volume for pgAdmin
      - /home/neo/data/pgadmin:/var/lib/pgadmin

  # Backend controller, also a Flask API
  orchestrator:
    container_name: orchestrator
    image: dockerneoc/radon:orchestrator
    volumes:
      # Docker socket so that the orchestrator can dynamically spawn containers
      - $XDG_RUNTIME_DIR/docker.sock:/var/run/docker.sock
    # Testing use only!
    # ports:
    # - "5451:5000"
    depends_on:
      - postgres
    networks:
      - radon_network

  # Frontend container
  frontend:
    container_name: frontend
    image: dockerneoc/radon:web-interface
    volumes:
      # FITS data volume, used to preview galaxy data
      - /home/sofia/data/fits:/fits-data
    ports:
      # Previously 5450:8501
      - "7777:8500"
    depends_on:
      - postgres
    networks:
      - radon_network

  # Pipeline containers will be spawned dynamically, so they are not defined here

networks:
  radon_network:
